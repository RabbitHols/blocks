{"version":3,"sources":["initialData.js","board/task.js","board/column.js","board/boardsType/bee.js","board/boardsType/board.js","components/createBoard.js","App.js","reportWebVitals.js","index.js"],"names":["initialData","boardsOrder","boards","type","id","title","content","tasks","ciao","parse","corser","vorsers","ds","pino","columns","todo","taskIds","done","discarded","bugs","columnOrder","Container","styled","div","props","isDragDisabled","isDragging","Handle","task","Fragment","draggableId","index","provided","snapshot","draggableProps","ref","innerRef","dragHandleProps","Title","h3","TaskList","isDraggingOver","column","droppableId","droppableProps","map","placeholder","CommandsForm","form","InputCommand","input","p","span","DeleteBoard","button","Bee","useState","clmAvalaible","setClmAvalaible","clmName","setClmName","data","setData","onDragStart","document","body","style","color","transition","onDragUpdate","update","destination","opacity","Object","keys","length","backgroundColor","onDragEnd","result","source","start","finish","newTaskIds","Array","from","splice","newColumn","newData","startTaskIds","newStart","finishTaskIds","newFinish","newColumnOrder","useEffect","indexOf","newCommand","replace","split","forEach","x","trim","push","columnTask","pop","key","saveBoard","board","onCommandChange","ev","value","target","onExecSubmit","e","preventDefault","prevCount","toString","onSubmit","onChange","onClick","deleteBoard","onDragUpdated","direction","columnId","Board","setUpdate","localStorage","setItem","JSON","stringify","prev","boardId","BoardName","Button","CreateBoard","name","setName","showForm","setShowForm","formInput","Header","App","getItem","setBoards","boardName","newBoardOrder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.192ec641.chunk.js","sourcesContent":["const initialData = {\r\n  boardsOrder: [\"new boards\"],\r\n  boards: {\r\n    \"new boards\": {\r\n      type: \"kanban\",\r\n      id: \"new boards\",\r\n      title: \"new boards\",\r\n      content: {\r\n        tasks: {\r\n          ciao: { id: \"ciao\", content: \" ciao\" },\r\n          parse: { id: \"parse\", content: \" parse\" },\r\n          corser: { id: \"corser\", content: \" corser\" },\r\n          vorsers: { id: \"vorsers\", content: \" vorsers\" },\r\n          ds: { id: \"ds\", content: \" ds\" },\r\n          pino: { id: \"pino\", content: \" pino\" },\r\n          \"create a lexer\": {\r\n            id: \"create a lexer\",\r\n            content: \" create a lexer\",\r\n          },\r\n          \"create a parser\": {\r\n            id: \"create a parser\",\r\n            content: \" create a parser\",\r\n          },\r\n          \"create a tokenizer\": {\r\n            id: \"create a tokenizer\",\r\n            content: \" create a tokenizer\",\r\n          },\r\n          \"how to create a lexer\": {\r\n            id: \"how to create a lexer\",\r\n            content: \" how to create a lexer\",\r\n          },\r\n          \"how to create a parser\": {\r\n            id: \"how to create a parser\",\r\n            content: \" how to create a parser\",\r\n          },\r\n          \"how to create a tokenizer\": {\r\n            id: \"how to create a tokenizer\",\r\n            content: \" how to create a tokenizer\",\r\n          },\r\n          \"be able to move columns\": {\r\n            id: \"be able to move columns\",\r\n            content: \" be able to move columns\",\r\n          },\r\n          \"be able to create task description\": {\r\n            id: \"be able to create task description\",\r\n            content: \" be able to create task description\",\r\n          },\r\n          \"create a better parser\": {\r\n            id: \"create a better parser\",\r\n            content: \" create a better parser\",\r\n          },\r\n          \"be able to move a task in other columns from terminal\": {\r\n            id: \"be able to move a task in other columns from terminal\",\r\n            content: \" be able to move a task in other columns from terminal\",\r\n          },\r\n          \"create a history system of command\": {\r\n            id: \"create a history system of command\",\r\n            content: \" create a history system of command\",\r\n          },\r\n          \"refactor id of task\": {\r\n            id: \"refactor id of task\",\r\n            content: \" refactor id of task\",\r\n          },\r\n          \"create an autosuggestion system\": {\r\n            id: \"create an autosuggestion system\",\r\n            content: \" create an autosuggestion system \",\r\n          },\r\n          \"be able to open a task from terminal\": {\r\n            id: \"be able to open a task from terminal\",\r\n            content: \" be able to open a task from terminal\",\r\n          },\r\n          \"create a basic logo\": {\r\n            id: \"create a basic logo\",\r\n            content: \" create a basic logo \",\r\n          },\r\n          \"be able to resize the kanban board\": {\r\n            id: \"be able to resize the kanban board\",\r\n            content: \" be able to resize the kanban board \",\r\n          },\r\n          \"set name for a board\": {\r\n            id: \"set name for a board\",\r\n            content: \" set name for a board\",\r\n          },\r\n          \"be able to create other boards\": {\r\n            id: \"be able to create other boards\",\r\n            content: \" be able to create other boards\",\r\n          },\r\n          \"be able to save task in localstorage\": {\r\n            id: \"be able to save task in localstorage\",\r\n            content: \" be able to save task in localstorage\",\r\n          },\r\n          \"be able to remove a specific column\": {\r\n            id: \"be able to remove a specific column\",\r\n            content: \" be able to remove a specific column\",\r\n          },\r\n          \"be able to remove a task\": {\r\n            id: \"be able to remove a task\",\r\n            content: \" be able to remove a task \",\r\n          },\r\n          \"be able to see only some task\": {\r\n            id: \"be able to see only some task\",\r\n            content: \" be able to see only some task\",\r\n          },\r\n        },\r\n        columns: {\r\n          todo: {\r\n            id: \"todo\",\r\n            title: \" todo\",\r\n            taskIds: [\r\n              \"be able to create task description\",\r\n              \"be able to remove a specific column\",\r\n              \"be able to move a task in other columns from terminal\",\r\n              \"create a better parser\",\r\n              \"create a history system of command\",\r\n              \"refactor id of task\",\r\n              \"create an autosuggestion system\",\r\n              \"be able to open a task from terminal\",\r\n              \"be able to resize the kanban board\",\r\n              \"be able to create other boards\",\r\n              \"be able to remove a task\",\r\n              \"be able to see only some task\",\r\n            ],\r\n          },\r\n          \"in progress\": {\r\n            id: \"in progress\",\r\n            title: \" in progress\",\r\n            taskIds: [],\r\n          },\r\n          done: {\r\n            id: \"done\",\r\n            title: \" done\",\r\n            taskIds: [\r\n              \"be able to move columns\",\r\n              \"be able to save task in localstorage\",\r\n              \"set name for a board\",\r\n            ],\r\n          },\r\n          discarded: {\r\n            id: \"discarded\",\r\n            title: \"discarded \",\r\n            taskIds: [\"create a basic logo\"],\r\n          },\r\n          bugs: { id: \"bugs\", title: \" bugs\", taskIds: [] },\r\n        },\r\n        columnOrder: [\"todo\", \"in progress\", \"done\", \"discarded\", \"bugs\"],\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default initialData;\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: ${props => \r\n          (props.isDragDisabled\r\n                  ? 'lightgrey' \r\n                  : props.isDragging \r\n                          ? 'lightgreen' \r\n                          : 'white' )};\r\n  display: flex;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: orange;\r\n  border-radius: 4px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst task = (props) => {\r\n    const isDragDisabled = false\r\n\r\n    return(\r\n            <React.Fragment>\r\n                <Draggable\r\n                    draggableId={props.task.id}\r\n                    index={props.index}\r\n                    isDragDisabled={isDragDisabled}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <Container\r\n                            {...provided.draggableProps}\r\n                            ref={provided.innerRef}\r\n                            isDragging={snapshot.isDragging}\r\n                            isDragDisabled={isDragDisabled}\r\n                        >\r\n                            <Handle {...provided.dragHandleProps} />\r\n                            {props.task.content}\r\n                        </Container>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n    )\r\n}\r\nexport default task","import React from \"react\";\r\nimport styled from 'styled-components'\r\nimport Task from './task'\r\nimport { Droppable, Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  margin: 8px;\r\n  border-radius: 5px;\r\n  width: 272px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #d0d1d7;\r\n  background-color: white;\r\n`;\r\nconst Title = styled.h3`\r\n  padding: 8px;  \r\n  text-transform: capitalize;\r\n`;\r\nconst TaskList = styled.div`\r\n  padding: 8px;\r\n  background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'inherit' )};\r\n  flex-grow: 1;\r\n  min-height: 100px;\r\n`;\r\n\r\nconst column = (props) => {\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Draggable draggableId={props.column.id} index={props.index}>\r\n                { provided => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        <Title {...provided.dragHandleProps} >{props.column.title}</Title>\r\n                        <Droppable droppableId={props.column.id} type={\"task\"}>\r\n                            { (provided, snapshot) => (\r\n                                <TaskList\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}\r\n                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                >\r\n                                    { props.tasks.map( (task, index) => <Task key={task.id} task={task} index={index}\r\n                                    />) }\r\n                                    {provided.placeholder}\r\n                                </TaskList>\r\n                            )}\r\n                        </Droppable>\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default column","import '../../App.css';\r\nimport {useState, useEffect} from \"react\";\r\nimport Column from '../column'\r\nimport '@atlaskit/css-reset';\r\nimport styled from \"styled-components\"\r\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\r\nimport React from \"react\"\r\n\r\nconst CommandsForm = styled.form`\r\n  padding: 7px\r\n`\r\nconst Container = styled.div`\r\n  display: flex;\r\n  margin: 5px;\r\n`\r\n\r\nconst InputCommand = styled.input`\r\n  width: 300px;\r\n  border: none;\r\n  border-bottom: 1px solid gray;\r\n  outline: none;\r\n`\r\n\r\nconst TextCommand = styled.p`\r\n  font-size: 18px;\r\n`\r\n\r\nconst Title = styled.span`\r\n  text-transform: capitalize;\r\n  font-weight: 800;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst DeleteBoard = styled.button`\r\n    margin-left: auto;\r\n`\r\n\r\nfunction Bee(props) {\r\n    const {initialData} = props\r\n    const [clmAvalaible, setClmAvalaible] = useState(1)\r\n    const [clmName, setClmName] = useState(\"\")\r\n    const [data, setData] = useState(initialData)\r\n\r\n    let onDragStart = () => {\r\n        document.body.style.color = 'orange';\r\n        document.body.style.transition = \"background-color 0.2s ease\"\r\n    };\r\n\r\n    const onDragUpdate = (update) => {\r\n        const { destination } = update;\r\n        const opacity = destination\r\n            ? destination.index / Object.keys(data.tasks).length\r\n            : 0\r\n        document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity}`\r\n    };\r\n\r\n    const onDragEnd = (result) => {\r\n        document.body.style.color = 'inherit';\r\n        document.body.style.backgroundColor = 'inherit';\r\n\r\n        const {destination, source, draggableId, type} = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if(type === 'column') {\r\n            const newColumnOrder = Array.from(data.columnOrder)\r\n            newColumnOrder.splice(source.index, 1)\r\n            newColumnOrder.splice(destination.index, 0, draggableId)\r\n\r\n            const newData = {\r\n                ...data,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            setData(newData);\r\n            return;\r\n        }\r\n\r\n        const start = data.columns[source.droppableId]\r\n        const finish = data.columns[destination.droppableId]\r\n\r\n        if (start === finish) {\r\n            const newTaskIds = Array.from(start.taskIds)\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId)\r\n\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            }\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...initialData.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            }\r\n\r\n            setData(newData);\r\n        } else {\r\n\r\n            // Moving from one list to another\r\n            const startTaskIds = Array.from(start.taskIds)\r\n            startTaskIds.splice(source.index, 1);\r\n            const newStart = {\r\n                ...start,\r\n                taskIds: startTaskIds\r\n            };\r\n\r\n            const finishTaskIds = Array.from(finish.taskIds);\r\n            finishTaskIds.splice(destination.index, 0, draggableId);\r\n            const newFinish = {\r\n                ...finish,\r\n                taskIds: finishTaskIds\r\n            }\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...data.columns,\r\n                    [newStart.id]: newStart,\r\n                    [newFinish.id]: newFinish\r\n                }\r\n            }\r\n            setData(newData);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n        let newData = {...data};\r\n\r\n\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1 && clmName.indexOf(\" -in \") < 0) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n            let listOfTask = newCommand.split(\",\")\r\n\r\n            listOfTask.forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n                newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n        }else if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1 && clmName.indexOf(\" -in \") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n            let columnTask = newCommand.split(\" -in \").pop();\r\n\r\n            let listOfTask = newCommand.split(\" -in \")[0]\r\n\r\n            listOfTask.split(\",\").forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n                newData.columns[columnTask].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n\r\n        }else if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n            newCommand = newCommand.split(',');\r\n\r\n            newCommand.forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n\r\n                newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n\r\n        }\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"rm\") > -1) {\r\n            let newCommand = clmName;\r\n\r\n            if(newCommand.indexOf(\"*\") > -1 && newCommand.indexOf(\"-e\") > -1 ) {\r\n\r\n\r\n            }\r\n            else if(newCommand.indexOf(\"*\") > -1){\r\n\r\n                for (let key of Object.keys(newData.columns)) {\r\n                    delete newData.columns[key];\r\n                }\r\n                newData.columnOrder = []\r\n                setData(newData)\r\n\r\n\r\n            } else {\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"cc -n\") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"cc -n\", \"\");\r\n            newCommand = newCommand.split(',', );\r\n            let clmId = clmAvalaible;\r\n\r\n            newCommand.forEach( x  => {\r\n                let id = x;\r\n                id = id.trim()\r\n                let newData = {...data};\r\n                newData.columns[id] = {\r\n                    id: id,\r\n                    title: x,\r\n                    taskIds: []\r\n                }\r\n                newData.columnOrder.push(id)\r\n                setData(newData)\r\n                clmId += 1;\r\n            })\r\n\r\n\r\n        }\r\n        setClmName(\"\")\r\n\r\n\r\n    }, [clmAvalaible])\r\n\r\n    useEffect( () => {\r\n        props.saveBoard(props.board.id, data);\r\n        //localStorage.setItem(props.board.id, JSON.stringify(data))\r\n    }, [data])\r\n\r\n    const addColumn = () =>  {\r\n        if(clmName.length > 0) {\r\n            setClmAvalaible(prevCount => prevCount + 1)\r\n        }\r\n    }\r\n\r\n    const onCommandChange = (ev) => {\r\n        const value = ev.target.value;\r\n        setClmName(value);\r\n    }\r\n\r\n\r\n    function onExecSubmit(e) {\r\n        e.preventDefault();\r\n        addColumn()\r\n    }\r\n\r\n    const onDeleteBoard = () => {\r\n        props.deleteBoard(props.board.id)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Draggable draggableId={(props.board.id+props.index).toString()} index={props.index}>\r\n                { provided => (\r\n                    <div\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n\r\n                        <Container>\r\n                        <Title {...provided.dragHandleProps} >{props.board.title}</Title>\r\n                        </Container>\r\n                        <Container>\r\n                            <CommandsForm onSubmit={onExecSubmit}>\r\n                                <label>$</label>\r\n                                <InputCommand type=\"text\" value={clmName} onChange={onCommandChange} />\r\n\r\n                            </CommandsForm>\r\n                            <DeleteBoard onClick={() => {onDeleteBoard()}}>Delete {props.board.id}</DeleteBoard>\r\n                        </Container>\r\n                        <DragDropContext\r\n                            onDragStart={onDragStart}\r\n                            onDragUpdated={onDragUpdate}\r\n                            onDragEnd={onDragEnd}\r\n                        >\r\n                            <Droppable droppableId={\"all-columns\"} direction={\"horizontal\"} type={\"column\"}>\r\n                                {provided => (\r\n                                    <Container\r\n                                        {...provided.droppableProps}\r\n                                        ref={provided.innerRef}\r\n                                    >\r\n                                        {\r\n                                            data.columnOrder.map((columnId, index) => {\r\n                                                const column = data.columns[columnId]\r\n                                                const tasks = column.taskIds.map(taskIds => data.tasks[taskIds])\r\n\r\n                                                return <Column key={column.id} column={column} tasks={tasks} index={index}/>\r\n                                            })\r\n                                        }\r\n                                        {provided.placeholder}\r\n                                    </Container>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Bee;\r\n","import React, { useEffect } from \"react\";\r\nimport {Droppable, DragDropContext} from \"react-beautiful-dnd\";\r\nimport Bee from \"./bee\";\r\nimport styled from \"styled-components\";\r\nimport {useState} from \"react\";\r\n\r\n\r\nconst Container = styled.div`\r\n`;\r\n\r\nconst Board = ( { data }) => {\r\n\r\n    const [update, setUpdate] = useState(false)\r\n\r\n    const saveBoard = (id, value) => {\r\n        let newData = {\r\n            ...data,\r\n            boards: {\r\n                ...data.boards,\r\n                [id]: {\r\n                    ...data.boards[id],\r\n                    content: value\r\n                }\r\n            }\r\n        }\r\n        localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n        setUpdate(prev => !prev)\r\n    }\r\n\r\n    const deleteBoard = (id) => {\r\n        let newData = {...data}\r\n        let index = newData.boardsOrder.indexOf(id)\r\n        newData.boardsOrder.splice(index, 1)\r\n        delete newData.boards[id]\r\n        localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n        setUpdate(prev => !prev)\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n                <DragDropContext>\r\n                <Droppable droppableId={\"all-boards\"} type={\"boards\"}>\r\n                    {(provided) => (\r\n                        <Container\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {\r\n                                data.boardsOrder.map((boardId, index) => {\r\n                                    const board = data.boards[boardId]\r\n                                    return <Bee key={board.id+board.title} initialData={board.content} board={board} index={index} deleteBoard={deleteBoard} saveBoard={saveBoard}/>\r\n\r\n                                })\r\n                            }\r\n                            {provided.placeholder}\r\n                        </Container>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Board","import React from \"react\"\r\nimport styled from \"styled-components\";\r\nimport {useState} from \"react\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 10px;\r\n    flex-direction: column\r\n`;\r\n\r\nconst BoardName = styled.input`\r\n    height:30px\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n    outline: none;\r\n    background-color: inherit;\r\n    border: none;\r\n    color: gray;\r\n    font-size: 30px;\r\n    cursor: pointer;\r\n`;\r\n\r\n\r\nconst CreateBoard = (props) => {\r\n\r\n    const [ name, setName ] = useState() \r\n    const [ showForm, setShowForm ] = useState(false)\r\n\r\n    const createBoard = (ev) => {\r\n        props.onChange(name)\r\n        setName(\"\")\r\n        showForm(false)\r\n        ev.preventDefault();\r\n    }\r\n\r\n    const onNameChange = (ev) => {\r\n        setName(ev.target.value)\r\n    }\r\n\r\n    const formInput = (\r\n        <form  onSubmit={createBoard}>\r\n            <BoardName type=\"text\" value={name} onChange={onNameChange} />\r\n        </form>\r\n    )\r\n\r\n    return (\r\n           <Container>\r\n                { !showForm && (<Button  onClick={() => {setShowForm(true)}}>Create new board</Button>)}\r\n                {showForm && formInput}\r\n           </Container>\r\n    )\r\n}\r\nexport default CreateBoard","import './App.css';\r\nimport initialData from \"./initialData\";\r\nimport React from \"react\"\r\nimport Board from \"./board/boardsType/board\"\r\nimport CreateBoard from './components/createBoard';\r\nimport {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\"\r\n\r\nconst Header = styled.div`\r\n  margin: 8px;\r\n  height: 100px;\r\n  background-color: gray;\r\n`\r\nconst Container = styled.div`\r\n  margin: 10px\r\n`\r\n\r\nconst getLstorage = () => {\r\n    if(localStorage.getItem(\"bee\")) {\r\n        return JSON.parse(localStorage.getItem(\"bee\"))\r\n    }else {\r\n        localStorage.setItem(\"bee\", JSON.stringify(initialData))\r\n        return JSON.parse(localStorage.getItem(\"bee\"))\r\n    }\r\n}\r\n\r\nfunction App() {\r\n\r\n    const [boards, setBoards] = useState(getLstorage())\r\n\r\n    const updateBoard = (boardName) => {\r\n        let data = boards\r\n        let newBoardOrder = data.boardsOrder\r\n        newBoardOrder.push(boardName)\r\n        let newData = {\r\n            ...data,\r\n            boardsOrder: newBoardOrder,\r\n            boards: {\r\n                ...data.boards,\r\n                [boardName]: {\r\n                    type: 'kanban',\r\n                    id: boardName,\r\n                    title: boardName,\r\n                    content: {\r\n                        tasks: {},\r\n                        columns: {},\r\n                        columnOrder: [],\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        setBoards(newData)\r\n    }\r\n\r\n    useEffect( () => {\r\n       localStorage.setItem(\"bee\", JSON.stringify(boards))\r\n    }, [boards])\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header>Bee</Header>\r\n            <Container>\r\n                <Board data={boards}/>\r\n                <CreateBoard onChange={updateBoard}></CreateBoard>\r\n            </Container>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}