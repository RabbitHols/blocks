{"version":3,"sources":["initialData.js","task.js","column.js","bee.js","App.js","reportWebVitals.js","index.js"],"names":["initialData","tasks","columns","columnOrder","Container","styled","div","props","isDragDisabled","isDragging","Handle","task","Fragment","draggableId","id","index","provided","snapshot","draggableProps","ref","innerRef","dragHandleProps","content","Title","h3","TaskList","isDraggingOver","column","title","droppableId","type","droppableProps","map","placeholder","CommandsForm","form","InputCommand","input","TextCommand","p","Bee","useState","clmAvalaible","setClmAvalaible","clmName","setClmName","data","setData","useEffect","newData","indexOf","newCommand","replace","split","forEach","x","trim","Object","keys","taskIds","push","localStorage","setItem","JSON","stringify","columnTask","pop","key","onSubmit","e","preventDefault","length","prevCount","value","onChange","ev","target","onDragStart","document","body","style","color","transition","onDragUpdated","update","destination","opacity","backgroundColor","onDragEnd","result","source","start","finish","newTaskIds","Array","from","splice","newColumn","startTaskIds","newStart","finishTaskIds","newFinish","newColumnOrder","direction","columnId","App","getItem","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ce6f4c3.chunk.js","sourcesContent":["const initialData = {\r\n    tasks: {},\r\n    columns: {},\r\n    columnOrder: []\r\n}\r\n\r\nexport default initialData","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: ${props => \r\n          (props.isDragDisabled\r\n                  ? 'lightgrey' \r\n                  : props.isDragging \r\n                          ? 'lightgreen' \r\n                          : 'white' )};\r\n  display: flex;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: orange;\r\n  border-radius: 4px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst task = (props) => {\r\n    const isDragDisabled = false\r\n\r\n    return(\r\n            <React.Fragment>\r\n                <Draggable\r\n                    draggableId={props.task.id}\r\n                    index={props.index}\r\n                    isDragDisabled={isDragDisabled}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <Container\r\n                            {...provided.draggableProps}\r\n                            ref={provided.innerRef}\r\n                            isDragging={snapshot.isDragging}\r\n                            isDragDisabled={isDragDisabled}\r\n                        >\r\n                            <Handle {...provided.dragHandleProps} />\r\n                            {props.task.content}\r\n                        </Container>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n    )\r\n}\r\nexport default task","import React from \"react\";\r\nimport styled from 'styled-components'\r\nimport Task from './task'\r\nimport { Droppable, Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  margin: 8px;\r\n  border-radius: 2px;\r\n  width: 272px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #ebecf0;\r\n`;\r\nconst Title = styled.h3`\r\n  padding: 8px;  \r\n  text-transform: capitalize;\r\n`;\r\nconst TaskList = styled.div`\r\n  padding: 8px;\r\n  background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'inherit' )};\r\n  flex-grow: 1;\r\n  min-height: 100px;\r\n`;\r\n\r\nconst column = (props) => {\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Draggable draggableId={props.column.id} index={props.index}>\r\n                { provided => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        <Title {...provided.dragHandleProps} >{props.column.title}</Title>\r\n                        <Droppable droppableId={props.column.id} type={\"task\"}>\r\n                            { (provided, snapshot) => (\r\n                                <TaskList\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}\r\n                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                >\r\n                                    { props.tasks.map( (task, index) => <Task key={task.id} task={task} index={index}\r\n                                    />) }\r\n                                    {provided.placeholder}\r\n                                </TaskList>\r\n                            )}\r\n                        </Droppable>\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default column","import './App.css';\r\nimport {useState, useEffect} from \"react\";\r\nimport Column from './column'\r\nimport '@atlaskit/css-reset';\r\nimport styled from \"styled-components\"\r\nimport { DragDropContext, Droppable} from \"react-beautiful-dnd\";\r\nimport React from \"react\"\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  border: 1px solid black;\r\n  margin: 5px;\r\n`\r\n\r\nconst CommandsForm = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: 30px;\r\n`\r\n\r\nconst InputCommand = styled.input`\r\n  height: 30px;\r\n  width: 50%;\r\n`\r\n\r\nconst TextCommand = styled.p`\r\n  font-size: 18px;\r\n`\r\nconst Title = styled.h3`\r\n  padding: 8px;  \r\n  text-transform: capitalize;\r\n`;\r\n\r\n\r\nfunction Bee( {initialData}) {\r\n\r\n    const [clmAvalaible, setClmAvalaible] = useState(1)\r\n    const [clmName, setClmName] = useState(\"\")\r\n    const [data, setData] = useState(initialData)\r\n\r\n    const [command, setCommand ] = useState(\"\")\r\n    const [execCommand, setExecCommand] = useState(false)\r\n\r\n\r\n    let onDragStart = () => {\r\n        document.body.style.color = 'orange';\r\n        document.body.style.transition = \"background-color 0.2s ease\"\r\n    };\r\n\r\n    const onDragUpdate = (update) => {\r\n        const { destination } = update;\r\n        const opacity = destination\r\n            ? destination.index / Object.keys(data.tasks).length\r\n            : 0\r\n        document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity}`\r\n    };\r\n\r\n    const onDragEnd = (result) => {\r\n        document.body.style.color = 'inherit';\r\n        document.body.style.backgroundColor = 'inherit';\r\n\r\n        const {destination, source, draggableId, type} = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if(type === 'column') {\r\n            const newColumnOrder = Array.from(data.columnOrder)\r\n            newColumnOrder.splice(source.index, 1)\r\n            newColumnOrder.splice(destination.index, 0, draggableId)\r\n\r\n            const newData = {\r\n                ...data,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            setData(newData);\r\n            return;\r\n        }\r\n\r\n        const start = data.columns[source.droppableId]\r\n        const finish = data.columns[destination.droppableId]\r\n\r\n        if (start === finish) {\r\n            const newTaskIds = Array.from(start.taskIds)\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId)\r\n\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            }\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...initialData.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            }\r\n\r\n            setData(newData);\r\n        } else {\r\n\r\n            // Moving from one list to another\r\n            const startTaskIds = Array.from(start.taskIds)\r\n            startTaskIds.splice(source.index, 1);\r\n            const newStart = {\r\n                ...start,\r\n                taskIds: startTaskIds\r\n            };\r\n\r\n            const finishTaskIds = Array.from(finish.taskIds);\r\n            finishTaskIds.splice(destination.index, 0, draggableId);\r\n            const newFinish = {\r\n                ...finish,\r\n                taskIds: finishTaskIds\r\n            }\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...data.columns,\r\n                    [newStart.id]: newStart,\r\n                    [newFinish.id]: newFinish\r\n                }\r\n            }\r\n            setData(newData);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n        let newData = {...data};\r\n\r\n\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1 && clmName.indexOf(\" -in \") < 0) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n            let listOfTask = newCommand.split(\",\")\r\n\r\n            listOfTask.forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n                newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n            localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n        }else if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1 && clmName.indexOf(\" -in \") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n            let columnTask = newCommand.split(\" -in \").pop();\r\n\r\n            let listOfTask = newCommand.split(\" -in \")[0]\r\n\r\n            listOfTask.split(\",\").forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n                newData.columns[columnTask].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n            localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n\r\n        }else if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n            newCommand = newCommand.split(',');\r\n\r\n            newCommand.forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n\r\n                newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n            localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n\r\n        }\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"rm\") > -1) {\r\n            let newCommand = clmName;\r\n\r\n            if(newCommand.indexOf(\"*\") > -1 && newCommand.indexOf(\"-e\") > -1 ) {\r\n\r\n\r\n            }\r\n            else if(newCommand.indexOf(\"*\") > -1){\r\n\r\n                for (let key of Object.keys(newData.columns)) {\r\n                    delete newData.columns[key];\r\n                }\r\n                newData.columnOrder = []\r\n                setData(newData)\r\n\r\n\r\n            } else {\r\n\r\n            }\r\n            localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n\r\n        }\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"cc -n\") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"cc -n\", \"\");\r\n            newCommand = newCommand.split(',', );\r\n            let clmId = clmAvalaible;\r\n\r\n            newCommand.forEach( x  => {\r\n                let id = x;\r\n                id = id.trim()\r\n                let newData = {...data};\r\n                newData.columns[id] = {\r\n                    id: id,\r\n                    title: x,\r\n                    taskIds: []\r\n                }\r\n                newData.columnOrder.push(id)\r\n                setData(newData)\r\n                clmId += 1;\r\n            })\r\n            localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n\r\n\r\n        }\r\n        setClmName(\"\")\r\n\r\n\r\n    }, [clmAvalaible])\r\n\r\n\r\n    const addColumn = () =>  {\r\n        if(clmName.length > 0) {\r\n            setClmAvalaible(prevCount => prevCount + 1)\r\n        }\r\n    }\r\n\r\n    const onCommandChange = (ev) => {\r\n        const value = ev.target.value;\r\n        setClmName(value);\r\n    }\r\n\r\n\r\n    function onExecSubmit(e) {\r\n        e.preventDefault();\r\n        addColumn()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CommandsForm onSubmit={onExecSubmit}>\r\n                <TextCommand>Enter command</TextCommand>\r\n                <InputCommand type=\"text\" value={clmName} onChange={onCommandChange} />\r\n            </CommandsForm>\r\n            <DragDropContext\r\n                onDragStart={onDragStart}\r\n                onDragUpdated={onDragUpdate}\r\n                onDragEnd={onDragEnd}\r\n            >\r\n                <Title>Kanban</Title>\r\n                <Droppable droppableId={\"all-columns\"} direction={\"horizontal\"} type={\"column\"}>\r\n                    {provided => (\r\n                        <Container\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {\r\n                                data.columnOrder.map((columnId, index) => {\r\n                                    const column = data.columns[columnId]\r\n                                    const tasks = column.taskIds.map(taskIds => data.tasks[taskIds])\r\n\r\n                                    return <Column key={column.id} column={column} tasks={tasks} index={index}/>\r\n                                })\r\n                            }\r\n                            {provided.placeholder}\r\n                        </Container>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Bee;\r\n","import './App.css';\r\nimport {useState, useEffect} from \"react\";\r\nimport initialData from \"./initialData\";\r\n\r\nimport React from \"react\"\r\nimport Bee from \"./bee\";\r\n\r\nfunction App() {\r\n\r\n\r\n    function getLstorage() {\r\n        if(localStorage.getItem(\"bee\")) {\r\n            return JSON.parse(localStorage.getItem(\"bee\"))\r\n        }\r\n        return initialData\r\n    }\r\n\r\n    const [data, setData] = useState(getLstorage())\r\n\r\n\r\n\r\n    return (\r\n          <Bee initialData={data}/>\r\n      )\r\n    }\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}