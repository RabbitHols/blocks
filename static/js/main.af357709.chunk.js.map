{"version":3,"sources":["board/task.js","board/column.js","board/boardsType/bee.js","grid/grid.js","components/createBoard.js","board/boardsType/board.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","props","isDragDisabled","isDragging","Handle","task","Fragment","draggableId","id","index","provided","snapshot","draggableProps","ref","innerRef","dragHandleProps","content","Title","h3","TaskList","isDraggingOver","ClonedDnd","column","title","droppableId","type","renderClone","rubric","droppableProps","tasks","map","placeholder","CommandsForm","form","InputCommand","input","p","span","DeleteBoard","button","Bee","initialData","useState","clmAvalaible","setClmAvalaible","clmName","setClmName","data","setData","useEffect","newData","indexOf","newCommand","replace","split","forEach","x","trim","columns","Object","keys","taskIds","push","columnTask","pop","key","columnOrder","saveBoard","board","onSubmit","e","preventDefault","length","prevCount","value","onChange","ev","target","onClick","deleteBoard","onDragStart","document","body","style","color","transition","onDragUpdated","update","destination","opacity","backgroundColor","onDragEnd","result","source","start","finish","newTaskIds","Array","from","splice","newColumn","startTaskIds","newStart","finishTaskIds","newFinish","newColumnOrder","direction","columnId","ResponsiveReactGridLayout","WidthProvider","Responsive","originalLayouts","ls","global","localStorage","JSON","parse","getItem","getFromLS","WrapperComponent","Grid","stringify","layouts","setLayouts","setUpdate","boards","setItem","prev","boardsOrder","onLayoutChange","layout","className","cols","lg","md","sm","xs","xxs","rowHeight","draggableCancel","boardId","data-grid","w","h","y","minW","minH","defaultProps","BoardName","Button","CreateBoard","name","setName","showForm","setShowForm","formInput","Header","h1","App","setBoards","items","boardName","newBoardOrder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.af357709.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: ${props => \r\n          (props.isDragDisabled\r\n                  ? 'lightgrey' \r\n                  : props.isDragging \r\n                          ? 'lightgreen' \r\n                          : 'white' )};\r\n  display: flex;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: orange;\r\n  border-radius: 4px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst task = (props) => {\r\n    const isDragDisabled = false\r\n\r\n    return(\r\n            <React.Fragment>\r\n                <Draggable\r\n                    draggableId={props.task.id}\r\n                    index={props.index}\r\n                    isDragDisabled={isDragDisabled}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <Container\r\n                            {...provided.draggableProps}\r\n                            ref={provided.innerRef}\r\n                            isDragging={snapshot.isDragging}\r\n                            isDragDisabled={isDragDisabled}\r\n                        >\r\n                            <Handle {...provided.dragHandleProps} />\r\n                            {props.task.content}\r\n                        </Container>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n    )\r\n}\r\nexport default task","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Task from \"./task\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport \"./../App.css\";\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  margin: 8px;\r\n  border-radius: 5px;\r\n  width: 272px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #d0d1d7;\r\n  background-color: white;\r\n`;\r\nconst Title = styled.h3`\r\n  padding: 8px;\r\n  text-transform: capitalize;\r\n`;\r\nconst TaskList = styled.div`\r\n  padding: 8px;\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver ? \"skyblue\" : \"inherit\"};\r\n  flex-grow: 1;\r\n  min-height: 100px;\r\n`;\r\nconst ClonedDnd = styled.div`\r\n  background-color: green !important;\r\n`;\r\n\r\nconst column = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Draggable draggableId={props.column.id} index={props.index}>\r\n        {(provided) => (\r\n          <Container {...provided.draggableProps} ref={provided.innerRef}>\r\n            <Title {...provided.dragHandleProps}>{props.column.title}</Title>\r\n            <Droppable\r\n              droppableId={props.column.id}\r\n              type={\"task\"}\r\n              renderClone={(provided, snapshot, rubric) => (\r\n                <ClonedDnd\r\n                  {...provided.draggableProps}\r\n                  {...provided.dragHandleProps}\r\n                  ref={provided.innerRef}\r\n                >\r\n                    \r\n                </ClonedDnd>\r\n              )}\r\n            >\r\n              {(provided, snapshot) => (\r\n                <TaskList\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                  isDraggingOver={snapshot.isDraggingOver}\r\n                >\r\n                  {props.tasks.map((task, index) => (\r\n                    <Task key={task.id} task={task} index={index} />\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </TaskList>\r\n              )}\r\n            </Droppable>\r\n          </Container>\r\n        )}\r\n      </Draggable>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default column;\r\n\r\n","import \"../../App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Column from \"../column\";\r\nimport \"@atlaskit/css-reset\";\r\nimport styled from \"styled-components\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport React from \"react\";\r\n\r\nconst CommandsForm = styled.form`\r\n  padding: 7px;\r\n`;\r\nconst Container = styled.div`\r\n  display: flex;\r\n  margin: 5px;\r\n`;\r\n\r\n\r\nconst InputCommand = styled.input`\r\n  width: 300px;\r\n  border: none;\r\n  border-bottom: 1px solid gray;\r\n  outline: none;\r\n`;\r\n\r\nconst TextCommand = styled.p`\r\n  font-size: 18px;\r\n`;\r\n\r\n\r\nconst Title = styled.span`\r\n  text-transform: capitalize;\r\n  font-weight: 800;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst DeleteBoard = styled.button`\r\n  margin-left: auto;\r\n`;\r\n\r\nconst ClonedDnd = styled.div`\r\n  background-color: green !important;\r\n`;\r\n\r\nfunction Bee(props) {\r\n  const { initialData } = props;\r\n  const [clmAvalaible, setClmAvalaible] = useState(1);\r\n  const [clmName, setClmName] = useState(\"\");\r\n  const [data, setData] = useState(initialData);\r\n\r\n  let onDragStart = () => {\r\n    document.body.style.color = \"orange\";\r\n    document.body.style.transition = \"background-color 0.2s ease\";\r\n  };\r\n\r\n  const onDragUpdate = (update) => {\r\n    const { destination } = update;\r\n    const opacity = destination\r\n      ? destination.index / Object.keys(data.tasks).length\r\n      : 0;\r\n    document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity}`;\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    document.body.style.color = \"inherit\";\r\n    document.body.style.backgroundColor = \"inherit\";\r\n\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (type === \"column\") {\r\n      const newColumnOrder = Array.from(data.columnOrder);\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(destination.index, 0, draggableId);\r\n\r\n      const newData = {\r\n        ...data,\r\n        columnOrder: newColumnOrder,\r\n      };\r\n      setData(newData);\r\n      return;\r\n    }\r\n\r\n    const start = data.columns[source.droppableId];\r\n    const finish = data.columns[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newTaskIds = Array.from(start.taskIds);\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        taskIds: newTaskIds,\r\n      };\r\n\r\n      const newData = {\r\n        ...data,\r\n        columns: {\r\n          ...initialData.columns,\r\n          [newColumn.id]: newColumn,\r\n        },\r\n      };\r\n\r\n      setData(newData);\r\n    } else {\r\n      // Moving from one list to another\r\n      const startTaskIds = Array.from(start.taskIds);\r\n      startTaskIds.splice(source.index, 1);\r\n      const newStart = {\r\n        ...start,\r\n        taskIds: startTaskIds,\r\n      };\r\n\r\n      const finishTaskIds = Array.from(finish.taskIds);\r\n      finishTaskIds.splice(destination.index, 0, draggableId);\r\n      const newFinish = {\r\n        ...finish,\r\n        taskIds: finishTaskIds,\r\n      };\r\n\r\n      const newData = {\r\n        ...data,\r\n        columns: {\r\n          ...data.columns,\r\n          [newStart.id]: newStart,\r\n          [newFinish.id]: newFinish,\r\n        },\r\n      };\r\n      setData(newData);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let newData = { ...data };\r\n\r\n    if (\r\n      clmAvalaible > 1 &&\r\n      clmName.indexOf(\"ct -n\") > -1 &&\r\n      clmName.indexOf(\" -in \") < 0\r\n    ) {\r\n      let newCommand = clmName;\r\n      newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n      let listOfTask = newCommand.split(\",\");\r\n\r\n      listOfTask.forEach((x) => {\r\n        let id = x.trim();\r\n        newData.tasks[id] = {\r\n          id: id,\r\n          content: x,\r\n        };\r\n        newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id);\r\n        setData(newData);\r\n      });\r\n    } else if (\r\n      clmAvalaible > 1 &&\r\n      clmName.indexOf(\"ct -n\") > -1 &&\r\n      clmName.indexOf(\" -in \") > -1\r\n    ) {\r\n      let newCommand = clmName;\r\n      newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n      let columnTask = newCommand.split(\" -in \").pop();\r\n\r\n      let listOfTask = newCommand.split(\" -in \")[0];\r\n\r\n      listOfTask.split(\",\").forEach((x) => {\r\n        let id = x.trim();\r\n        newData.tasks[id] = {\r\n          id: id,\r\n          content: x,\r\n        };\r\n        newData.columns[columnTask].taskIds.push(id);\r\n        setData(newData);\r\n      });\r\n    } else if (clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1) {\r\n      let newCommand = clmName;\r\n      newCommand = newCommand.replace(\"ct -n\", \"\");\r\n      newCommand = newCommand.split(\",\");\r\n\r\n      newCommand.forEach((x) => {\r\n        let id = x.trim();\r\n        newData.tasks[id] = {\r\n          id: id,\r\n          content: x,\r\n        };\r\n\r\n        newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id);\r\n        setData(newData);\r\n      });\r\n    }\r\n\r\n    if (clmAvalaible > 1 && clmName.indexOf(\"rm\") > -1) {\r\n      let newCommand = clmName;\r\n\r\n      if (newCommand.indexOf(\"*\") > -1 && newCommand.indexOf(\"-e\") > -1) {\r\n      } else if (newCommand.indexOf(\"*\") > -1) {\r\n        for (let key of Object.keys(newData.columns)) {\r\n          delete newData.columns[key];\r\n        }\r\n        newData.columnOrder = [];\r\n        setData(newData);\r\n      } else {\r\n      }\r\n    }\r\n\r\n    if (clmAvalaible > 1 && clmName.indexOf(\"cc -n\") > -1) {\r\n      let newCommand = clmName;\r\n      newCommand = newCommand.replace(\"cc -n\", \"\");\r\n      newCommand = newCommand.split(\",\");\r\n      let clmId = clmAvalaible;\r\n\r\n      newCommand.forEach((x) => {\r\n        let id = x;\r\n        id = id.trim();\r\n        let newData = { ...data };\r\n        newData.columns[id] = {\r\n          id: id,\r\n          title: x,\r\n          taskIds: [],\r\n        };\r\n        newData.columnOrder.push(id);\r\n        setData(newData);\r\n        clmId += 1;\r\n      });\r\n    }\r\n    setClmName(\"\");\r\n  }, [clmAvalaible]);\r\n\r\n  useEffect(() => {\r\n    props.saveBoard(props.board.id, data);\r\n    //localStorage.setItem(props.board.id, JSON.stringify(data))\r\n  }, [data]);\r\n\r\n  const addColumn = () => {\r\n    if (clmName.length > 0) {\r\n      setClmAvalaible((prevCount) => prevCount + 1);\r\n    }\r\n  };\r\n\r\n  const onCommandChange = (ev) => {\r\n    const value = ev.target.value;\r\n    setClmName(value);\r\n  };\r\n\r\n  function onExecSubmit(e) {\r\n    e.preventDefault();\r\n    addColumn();\r\n  }\r\n\r\n  const onDeleteBoard = () => {\r\n    props.deleteBoard(props.board.id);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <Container>\r\n          <Title>{props.board.title}</Title>\r\n        </Container>\r\n        <Container>\r\n          <CommandsForm onSubmit={onExecSubmit}>\r\n            <label>$</label>\r\n            <InputCommand\r\n              type=\"text\"\r\n              value={clmName}\r\n              onChange={onCommandChange}\r\n            />\r\n          </CommandsForm>\r\n          <DeleteBoard\r\n            onClick={() => {\r\n              onDeleteBoard();\r\n            }}\r\n          >\r\n            Delete {props.board.id}\r\n          </DeleteBoard>\r\n        </Container>\r\n        <DragDropContext\r\n          onDragStart={onDragStart}\r\n          onDragUpdated={onDragUpdate}\r\n          onDragEnd={onDragEnd}\r\n        >\r\n          <Droppable\r\n            droppableId={\"all-columns\"}\r\n            direction={\"horizontal\"}\r\n            type={\"column\"}\r\n            renderClone={(provided, snapshot, rubric) => (\r\n              <ClonedDnd\r\n                {...provided.draggableProps}\r\n                {...provided.dragHandleProps}\r\n                ref={provided.innerRef}\r\n              >\r\n              </ClonedDnd>\r\n            )}\r\n          >\r\n            {(provided) => (\r\n              <Container {...provided.droppableProps} ref={provided.innerRef}>\r\n                {data.columnOrder.map((columnId, index) => {\r\n                  const column = data.columns[columnId];\r\n                  const tasks = column.taskIds.map(\r\n                    (taskIds) => data.tasks[taskIds]\r\n                  );\r\n\r\n                  return (\r\n                    <Column\r\n                      key={column.id}\r\n                      column={column}\r\n                      tasks={tasks}\r\n                      index={index}\r\n                    />\r\n                  );\r\n                })}\r\n                {provided.placeholder}\r\n              </Container>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default Bee;\r\n","import React from \"react\";\r\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\r\nimport Bee from \"./../board/boardsType/bee\";\r\nimport styled from \"styled-components\";\r\nimport itda from \"./../initialData\";\r\nimport { useState, useEffect } from \"react\";\r\nimport './../App.css';\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\nconst originalLayouts = getFromLS(\"layouts\") || {};\r\n\r\nconst Container = styled.div`\r\n  background-color: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0 3px 5px -1px rgba(0,0,0,.2), 0 6px 10px 0 rgba(0,0,0,.14), 0 1px 18px 0 rgba(0,0,0,.12);\r\n`;\r\n\r\nconst WrapperComponent = styled.div`\r\n  overflow-y: auto;\r\n  background-color: white;\r\n  margin-top: 20px\r\n`;\r\n\r\n/**\r\n * This layout demonstrates how to sync multiple responsive layouts to localstorage.\r\n */\r\nconst Grid = (props) => {\r\n\r\n  const [layouts, setLayouts] = useState(JSON.parse(JSON.stringify(originalLayouts)))\r\n  const [update, setUpdate] = useState(false)\r\n\r\n  const saveBoard = (id, value) => {\r\n    let newData = {\r\n        ...props.data,\r\n        boards: {\r\n            ...props.data.boards,\r\n            [id]: {\r\n                ...props.data.boards[id],\r\n                content: value\r\n            }\r\n        }\r\n    }\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n    setUpdate(prev => !prev)\r\n}\r\n\r\nconst deleteBoard = (id) => {\r\n    let newData = {...props.data}\r\n    let index = newData.boardsOrder.indexOf(id)\r\n    newData.boardsOrder.splice(index, 1)\r\n    delete newData.boards[id]\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n    setUpdate(prev => !prev)\r\n}\r\n\r\n  function generateDOM() {\r\n    return props.data.boardsOrder.map((boardId, index) => {\r\n      const board = props.data.boards[boardId];\r\n\r\n      return (\r\n        <Container key={index} data-grid={{ w: 2, h: 3, x: 0, y: 0, minW: 2, minH: 3}}>\r\n          <WrapperComponent className={\"noDrag\"}>\r\n            <Bee\r\n              initialData={board.content}\r\n              board={board}\r\n              index={index}\r\n              deleteBoard={deleteBoard}\r\n              saveBoard={saveBoard}\r\n            />\r\n          </WrapperComponent>\r\n        </Container>\r\n      );\r\n    });\r\n  };\r\n \r\n\r\n  function resetLayout() {\r\n    setLayouts({})\r\n  }\r\n\r\n  function onLayoutChange(layout, layouts) {\r\n    saveToLS(\"layouts\", layouts);\r\n    setLayouts(layouts)\r\n\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        {/* <button onClick={() => resetLayout()}>Reset Layout</button> */}\r\n        <ResponsiveReactGridLayout\r\n          className=\"layout\"\r\n          cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n          rowHeight={30}\r\n          layouts={layouts}\r\n          draggableCancel=\".noDrag\"\r\n          onLayoutChange={(layout, layouts) =>\r\n            onLayoutChange(layout, layouts)\r\n          }\r\n          >\r\n          {generateDOM()}\r\n        </ResponsiveReactGridLayout>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction getFromLS(key) {\r\n  let ls = {};\r\n  if (global.localStorage) {\r\n    try {\r\n      ls = JSON.parse(global.localStorage.getItem(\"rgl-8\")) || {};\r\n    } catch (e) {\r\n      /*Ignore*/\r\n    }\r\n  }\r\n  return ls[key];\r\n}\r\n\r\nfunction saveToLS(key, value) {\r\n  if (global.localStorage) {\r\n    global.localStorage.setItem(\r\n      \"rgl-8\",\r\n      JSON.stringify({\r\n        [key]: value\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nGrid.defaultProps = {\r\n    className: \"layout\",\r\n    cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\r\n    rowHeight: 30\r\n}\r\n\r\nexport default Grid","import React from \"react\"\r\nimport styled from \"styled-components\";\r\nimport {useState} from \"react\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 10px;\r\n    flex-direction: column\r\n`;\r\n\r\nconst BoardName = styled.input`\r\n    height:30px\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n    outline: none;\r\n    background-color: inherit;\r\n    border: none;\r\n    color: gray;\r\n    font-size: 30px;\r\n    cursor: pointer;\r\n`;\r\n\r\n\r\nconst CreateBoard = (props) => {\r\n\r\n    const [ name, setName ] = useState() \r\n    const [ showForm, setShowForm ] = useState(false)\r\n\r\n    const createBoard = (ev) => {\r\n        props.onChange(name)\r\n        setName(\"\")\r\n        showForm(false)\r\n        ev.preventDefault();\r\n    }\r\n\r\n    const onNameChange = (ev) => {\r\n        setName(ev.target.value)\r\n    }\r\n\r\n    const formInput = (\r\n        <form  onSubmit={createBoard}>\r\n            <BoardName type=\"text\" value={name} onChange={onNameChange} />\r\n        </form>\r\n    )\r\n\r\n    return (\r\n           <Container>\r\n                { !showForm && (<Button  onClick={() => {setShowForm(true)}}>Create new board</Button>)}\r\n                {showForm && formInput}\r\n           </Container>\r\n    )\r\n}\r\nexport default CreateBoard","import React, { useEffect } from \"react\";\r\nimport { Droppable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport Bee from \"./bee\";\r\nimport styled from \"styled-components\";\r\nimport { useState } from \"react\";\r\n\r\nconst Container = styled.div``;\r\n\r\nconst Board = ({ data }) => {\r\n  const [update, setUpdate] = useState(false);\r\n\r\n  const saveBoard = (id, value) => {\r\n    let newData = {\r\n      ...data,\r\n      boards: {\r\n        ...data.boards,\r\n        [id]: {\r\n          ...data.boards[id],\r\n          content: value,\r\n        },\r\n      },\r\n    };\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData));\r\n    setUpdate((prev) => !prev);\r\n  };\r\n\r\n  const deleteBoard = (id) => {\r\n    let newData = { ...data };\r\n    let index = newData.boardsOrder.indexOf(id);\r\n    newData.boardsOrder.splice(index, 1);\r\n    delete newData.boards[id];\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData));\r\n    setUpdate((prev) => !prev);\r\n  };\r\n\r\n const boardsList = data.boardsOrder.map((boardId, index) => {\r\n    const board = data.boards[boardId];\r\n    \r\n    return (\r\n        <Bee\r\n            key={board.id + board.title}\r\n            initialData={board.content}\r\n            board={board}\r\n            index={index}\r\n            deleteBoard={deleteBoard}\r\n            saveBoard={saveBoard}\r\n        />\r\n    )\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n     {boardsList}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n\r\n","import './App.css';\r\nimport initialData from \"./initialData\";\r\nimport React from \"react\"\r\nimport {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\"\r\n\r\nimport CreateBoard from './components/createBoard';\r\nimport Board from \"./board/boardsType/board\"\r\nimport Grid from \"./grid/grid\"\r\n\r\n\r\nconst Header = styled.div`\r\n  height: 30px;\r\n  background-color: #30367c;\r\n  padding-left: 10px;\r\n`\r\nconst Container = styled.div`\r\n`\r\nconst Title = styled.h1`\r\n    font-size: 25px;\r\n    color: #fff;\r\n`\r\n\r\nconst getLstorage = () => {\r\n    if(localStorage.getItem(\"bee\")) {\r\n        return JSON.parse(localStorage.getItem(\"bee\"))\r\n    }else {\r\n        localStorage.setItem(\"bee\", JSON.stringify(initialData))\r\n        return JSON.parse(localStorage.getItem(\"bee\"))\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    document.body.style.backgroundColor = \"#efefef\"\r\n    const [boards, setBoards] = useState(getLstorage())\r\n\r\n    const updateBoard = (boardName) => {\r\n        let data = boards\r\n        let newBoardOrder = data.boardsOrder\r\n        newBoardOrder.push(boardName)\r\n        let newData = {\r\n            ...data,\r\n            boardsOrder: newBoardOrder,\r\n            boards: {\r\n                ...data.boards,\r\n                [boardName]: {\r\n                    type: 'kanban',\r\n                    id: boardName,\r\n                    title: boardName,\r\n                    content: {\r\n                        tasks: {},\r\n                        columns: {},\r\n                        columnOrder: [],\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        setBoards(newData)\r\n    }\r\n\r\n    useEffect( () => {\r\n       localStorage.setItem(\"bee\", JSON.stringify(boards))\r\n    }, [boards])\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header>\r\n                <Title>Pazle</Title>\r\n            </Header>\r\n            <Container>\r\n                { <Grid data={boards} items={boards.boardsOrder.length}></Grid>}\r\n                <CreateBoard onChange={updateBoard}></CreateBoard>\r\n            </Container>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './../node_modules/react-grid-layout/css/styles.css'\r\nimport './../node_modules/react-resizable/css/styles.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}