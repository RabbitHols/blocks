{"version":3,"sources":["board/task.js","board/column.js","board/boardsType/bee.js","grid/grid.js","components/createBoard.js","board/boardsType/board.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","props","isDragDisabled","isDragging","Handle","task","Fragment","draggableId","id","index","provided","snapshot","draggableProps","ref","innerRef","dragHandleProps","content","Title","h3","TaskList","isDraggingOver","column","title","droppableId","type","droppableProps","tasks","map","placeholder","CommandsForm","form","InputCommand","input","p","span","DeleteBoard","button","Bee","initialData","useState","clmAvalaible","setClmAvalaible","clmName","setClmName","data","setData","onDragStart","document","body","style","color","transition","onDragUpdate","update","destination","opacity","Object","keys","length","backgroundColor","onDragEnd","result","source","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newData","startTaskIds","newStart","finishTaskIds","newFinish","newColumnOrder","columnOrder","useEffect","indexOf","newCommand","replace","split","forEach","x","trim","push","columnTask","pop","key","saveBoard","board","onCommandChange","ev","value","target","onExecSubmit","e","preventDefault","prevCount","toString","onSubmit","onChange","onClick","deleteBoard","onDragUpdated","direction","columnId","ResponsiveReactGridLayout","WidthProvider","Responsive","originalLayouts","ls","global","localStorage","JSON","parse","getItem","getFromLS","WrapperComponent","Grid","stringify","layouts","setLayouts","setUpdate","boards","setItem","prev","boardsOrder","onLayoutChange","layout","className","cols","lg","md","sm","xs","xxs","rowHeight","draggableCancel","boardId","data-grid","w","h","y","minW","minH","defaultProps","BoardName","Button","CreateBoard","name","setName","showForm","setShowForm","formInput","Header","App","setBoards","items","boardName","newBoardOrder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.97fc1004.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: ${props => \r\n          (props.isDragDisabled\r\n                  ? 'lightgrey' \r\n                  : props.isDragging \r\n                          ? 'lightgreen' \r\n                          : 'white' )};\r\n  display: flex;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: orange;\r\n  border-radius: 4px;\r\n  margin-right: 8px;\r\n`\r\n\r\nconst task = (props) => {\r\n    const isDragDisabled = false\r\n\r\n    return(\r\n            <React.Fragment>\r\n                <Draggable\r\n                    draggableId={props.task.id}\r\n                    index={props.index}\r\n                    isDragDisabled={isDragDisabled}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <Container\r\n                            {...provided.draggableProps}\r\n                            ref={provided.innerRef}\r\n                            isDragging={snapshot.isDragging}\r\n                            isDragDisabled={isDragDisabled}\r\n                        >\r\n                            <Handle {...provided.dragHandleProps} />\r\n                            {props.task.content}\r\n                        </Container>\r\n                    )}\r\n                </Draggable>\r\n            </React.Fragment>\r\n    )\r\n}\r\nexport default task","import React from \"react\";\r\nimport styled from 'styled-components'\r\nimport Task from './task'\r\nimport { Droppable, Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  margin: 8px;\r\n  border-radius: 5px;\r\n  width: 272px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid #d0d1d7;\r\n  background-color: white;\r\n`;\r\nconst Title = styled.h3`\r\n  padding: 8px;  \r\n  text-transform: capitalize;\r\n`;\r\nconst TaskList = styled.div`\r\n  padding: 8px;\r\n  background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'inherit' )};\r\n  flex-grow: 1;\r\n  min-height: 100px;\r\n`;\r\n\r\nconst column = (props) => {\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Draggable draggableId={props.column.id} index={props.index}>\r\n                { provided => (\r\n                    <Container\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        <Title {...provided.dragHandleProps} >{props.column.title}</Title>\r\n                        <Droppable droppableId={props.column.id} type={\"task\"}>\r\n                            { (provided, snapshot) => (\r\n                                <TaskList\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}\r\n                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                >\r\n                                    { props.tasks.map( (task, index) => <Task key={task.id} task={task} index={index}\r\n                                    />) }\r\n                                    {provided.placeholder}\r\n                                </TaskList>\r\n                            )}\r\n                        </Droppable>\r\n                    </Container>\r\n                )}\r\n            </Draggable>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default column","import '../../App.css';\r\nimport {useState, useEffect} from \"react\";\r\nimport Column from '../column'\r\nimport '@atlaskit/css-reset';\r\nimport styled from \"styled-components\"\r\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\r\nimport React from \"react\"\r\n\r\nconst CommandsForm = styled.form`\r\n  padding: 7px\r\n`\r\nconst Container = styled.div`\r\n  display: flex;\r\n  margin: 5px;\r\n`\r\n\r\nconst InputCommand = styled.input`\r\n  width: 300px;\r\n  border: none;\r\n  border-bottom: 1px solid gray;\r\n  outline: none;\r\n`\r\n\r\nconst TextCommand = styled.p`\r\n  font-size: 18px;\r\n`\r\n\r\nconst Title = styled.span`\r\n  text-transform: capitalize;\r\n  font-weight: 800;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst DeleteBoard = styled.button`\r\n    margin-left: auto;\r\n`\r\n\r\nfunction Bee(props) {\r\n    const {initialData} = props\r\n    const [clmAvalaible, setClmAvalaible] = useState(1)\r\n    const [clmName, setClmName] = useState(\"\")\r\n    const [data, setData] = useState(initialData)\r\n\r\n    let onDragStart = () => {\r\n        document.body.style.color = 'orange';\r\n        document.body.style.transition = \"background-color 0.2s ease\"\r\n    };\r\n\r\n    const onDragUpdate = (update) => {\r\n        const { destination } = update;\r\n        const opacity = destination\r\n            ? destination.index / Object.keys(data.tasks).length\r\n            : 0\r\n        document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity}`\r\n    };\r\n\r\n    const onDragEnd = (result) => {\r\n        document.body.style.color = 'inherit';\r\n        document.body.style.backgroundColor = 'inherit';\r\n\r\n        const {destination, source, draggableId, type} = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if(type === 'column') {\r\n            const newColumnOrder = Array.from(data.columnOrder)\r\n            newColumnOrder.splice(source.index, 1)\r\n            newColumnOrder.splice(destination.index, 0, draggableId)\r\n\r\n            const newData = {\r\n                ...data,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            setData(newData);\r\n            return;\r\n        }\r\n\r\n        const start = data.columns[source.droppableId]\r\n        const finish = data.columns[destination.droppableId]\r\n\r\n        if (start === finish) {\r\n            const newTaskIds = Array.from(start.taskIds)\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId)\r\n\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            }\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...initialData.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            }\r\n\r\n            setData(newData);\r\n        } else {\r\n\r\n            // Moving from one list to another\r\n            const startTaskIds = Array.from(start.taskIds)\r\n            startTaskIds.splice(source.index, 1);\r\n            const newStart = {\r\n                ...start,\r\n                taskIds: startTaskIds\r\n            };\r\n\r\n            const finishTaskIds = Array.from(finish.taskIds);\r\n            finishTaskIds.splice(destination.index, 0, draggableId);\r\n            const newFinish = {\r\n                ...finish,\r\n                taskIds: finishTaskIds\r\n            }\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...data.columns,\r\n                    [newStart.id]: newStart,\r\n                    [newFinish.id]: newFinish\r\n                }\r\n            }\r\n            setData(newData);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n        let newData = {...data};\r\n\r\n\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1 && clmName.indexOf(\" -in \") < 0) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n            let listOfTask = newCommand.split(\",\")\r\n\r\n            listOfTask.forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n                newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n        }else if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1 && clmName.indexOf(\" -in \") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n\r\n            let columnTask = newCommand.split(\" -in \").pop();\r\n\r\n            let listOfTask = newCommand.split(\" -in \")[0]\r\n\r\n            listOfTask.split(\",\").forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n                newData.columns[columnTask].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n\r\n        }else if(clmAvalaible > 1 && clmName.indexOf(\"ct -n\") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"ct -n\", \"\");\r\n            newCommand = newCommand.split(',');\r\n\r\n            newCommand.forEach( x  => {\r\n                let id = x.trim();\r\n                newData.tasks[id] = {\r\n                    id: id,\r\n                    content: x,\r\n                }\r\n\r\n                newData.columns[Object.keys(newData.columns)[0]].taskIds.push(id)\r\n                setData(newData)\r\n            })\r\n\r\n        }\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"rm\") > -1) {\r\n            let newCommand = clmName;\r\n\r\n            if(newCommand.indexOf(\"*\") > -1 && newCommand.indexOf(\"-e\") > -1 ) {\r\n\r\n\r\n            }\r\n            else if(newCommand.indexOf(\"*\") > -1){\r\n\r\n                for (let key of Object.keys(newData.columns)) {\r\n                    delete newData.columns[key];\r\n                }\r\n                newData.columnOrder = []\r\n                setData(newData)\r\n\r\n\r\n            } else {\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if(clmAvalaible > 1 && clmName.indexOf(\"cc -n\") > -1) {\r\n            let newCommand = clmName;\r\n            newCommand = newCommand.replace(\"cc -n\", \"\");\r\n            newCommand = newCommand.split(',', );\r\n            let clmId = clmAvalaible;\r\n\r\n            newCommand.forEach( x  => {\r\n                let id = x;\r\n                id = id.trim()\r\n                let newData = {...data};\r\n                newData.columns[id] = {\r\n                    id: id,\r\n                    title: x,\r\n                    taskIds: []\r\n                }\r\n                newData.columnOrder.push(id)\r\n                setData(newData)\r\n                clmId += 1;\r\n            })\r\n\r\n\r\n        }\r\n        setClmName(\"\")\r\n\r\n\r\n    }, [clmAvalaible])\r\n\r\n    useEffect( () => {\r\n        props.saveBoard(props.board.id, data);\r\n        //localStorage.setItem(props.board.id, JSON.stringify(data))\r\n    }, [data])\r\n\r\n    const addColumn = () =>  {\r\n        if(clmName.length > 0) {\r\n            setClmAvalaible(prevCount => prevCount + 1)\r\n        }\r\n    }\r\n\r\n    const onCommandChange = (ev) => {\r\n        const value = ev.target.value;\r\n        setClmName(value);\r\n    }\r\n\r\n\r\n    function onExecSubmit(e) {\r\n        e.preventDefault();\r\n        addColumn()\r\n    }\r\n\r\n    const onDeleteBoard = () => {\r\n        props.deleteBoard(props.board.id)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Draggable draggableId={(props.board.id+props.index).toString()} index={props.index}>\r\n                { provided => (\r\n                    <div\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n\r\n                        <Container>\r\n                        <Title {...provided.dragHandleProps} >{props.board.title}</Title>\r\n                        </Container>\r\n                        <Container>\r\n                            <CommandsForm onSubmit={onExecSubmit}>\r\n                                <label>$</label>\r\n                                <InputCommand type=\"text\" value={clmName} onChange={onCommandChange} />\r\n\r\n                            </CommandsForm>\r\n                            <DeleteBoard onClick={() => {onDeleteBoard()}}>Delete {props.board.id}</DeleteBoard>\r\n                        </Container>\r\n                        <DragDropContext\r\n                            onDragStart={onDragStart}\r\n                            onDragUpdated={onDragUpdate}\r\n                            onDragEnd={onDragEnd}\r\n                        >\r\n                            <Droppable droppableId={\"all-columns\"} direction={\"horizontal\"} type={\"column\"}>\r\n                                {provided => (\r\n                                    <Container\r\n                                        {...provided.droppableProps}\r\n                                        ref={provided.innerRef}\r\n                                    >\r\n                                        {\r\n                                            data.columnOrder.map((columnId, index) => {\r\n                                                const column = data.columns[columnId]\r\n                                                const tasks = column.taskIds.map(taskIds => data.tasks[taskIds])\r\n\r\n                                                return <Column key={column.id} column={column} tasks={tasks} index={index}/>\r\n                                            })\r\n                                        }\r\n                                        {provided.placeholder}\r\n                                    </Container>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Bee;\r\n","import React from \"react\";\r\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\r\nimport Bee from \"./../board/boardsType/bee\";\r\nimport styled from \"styled-components\";\r\nimport itda from \"./../initialData\";\r\nimport { useState, useEffect } from \"react\";\r\nimport './../App.css';\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\nconst originalLayouts = getFromLS(\"layouts\") || {};\r\n\r\nconst Container = styled.div`\r\n  background-color: #dbdbdb;\r\n  border: 1px solid #dbdbdb;\r\n  border-radius: 4px\r\n  margin-bottom: 15px\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst WrapperComponent = styled.div`\r\n  overflow-y: auto;\r\n  background-color: white;\r\n  margin-top: 50px\r\n`;\r\n\r\n/**\r\n * This layout demonstrates how to sync multiple responsive layouts to localstorage.\r\n */\r\nconst Grid = (props) => {\r\n\r\n  const [layouts, setLayouts] = useState(JSON.parse(JSON.stringify(originalLayouts)))\r\n  const [update, setUpdate] = useState(false)\r\n\r\n  const saveBoard = (id, value) => {\r\n    let newData = {\r\n        ...props.data,\r\n        boards: {\r\n            ...props.data.boards,\r\n            [id]: {\r\n                ...props.data.boards[id],\r\n                content: value\r\n            }\r\n        }\r\n    }\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n    setUpdate(prev => !prev)\r\n}\r\n\r\nconst deleteBoard = (id) => {\r\n    let newData = {...props.data}\r\n    let index = newData.boardsOrder.indexOf(id)\r\n    newData.boardsOrder.splice(index, 1)\r\n    delete newData.boards[id]\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData))\r\n    setUpdate(prev => !prev)\r\n}\r\n\r\n  function generateDOM() {\r\n    return props.data.boardsOrder.map((boardId, index) => {\r\n      const board = props.data.boards[boardId];\r\n\r\n      return (\r\n        <Container key={index} data-grid={{ w: 2, h: 3, x: 0, y: 0, minW: 2, minH: 3}}>\r\n          <WrapperComponent className={\"noDrag\"}>\r\n            <Bee\r\n              initialData={board.content}\r\n              board={board}\r\n              index={index}\r\n              deleteBoard={deleteBoard}\r\n              saveBoard={saveBoard}\r\n            />\r\n          </WrapperComponent>\r\n        </Container>\r\n      );\r\n    });\r\n  };\r\n \r\n\r\n  function resetLayout() {\r\n    setLayouts({})\r\n  }\r\n\r\n  function onLayoutChange(layout, layouts) {\r\n    saveToLS(\"layouts\", layouts);\r\n    setLayouts(layouts)\r\n\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={() => resetLayout()}>Reset Layout</button>\r\n        <ResponsiveReactGridLayout\r\n          className=\"layout\"\r\n          cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n          rowHeight={30}\r\n          layouts={layouts}\r\n          draggableCancel=\".noDrag\"\r\n          onLayoutChange={(layout, layouts) =>\r\n            onLayoutChange(layout, layouts)\r\n          }\r\n          >\r\n          {generateDOM()}\r\n        </ResponsiveReactGridLayout>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction getFromLS(key) {\r\n  let ls = {};\r\n  if (global.localStorage) {\r\n    try {\r\n      ls = JSON.parse(global.localStorage.getItem(\"rgl-8\")) || {};\r\n    } catch (e) {\r\n      /*Ignore*/\r\n    }\r\n  }\r\n  return ls[key];\r\n}\r\n\r\nfunction saveToLS(key, value) {\r\n  if (global.localStorage) {\r\n    global.localStorage.setItem(\r\n      \"rgl-8\",\r\n      JSON.stringify({\r\n        [key]: value\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nGrid.defaultProps = {\r\n    className: \"layout\",\r\n    cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\r\n    rowHeight: 30\r\n}\r\n\r\nexport default Grid","import React from \"react\"\r\nimport styled from \"styled-components\";\r\nimport {useState} from \"react\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 10px;\r\n    flex-direction: column\r\n`;\r\n\r\nconst BoardName = styled.input`\r\n    height:30px\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n    outline: none;\r\n    background-color: inherit;\r\n    border: none;\r\n    color: gray;\r\n    font-size: 30px;\r\n    cursor: pointer;\r\n`;\r\n\r\n\r\nconst CreateBoard = (props) => {\r\n\r\n    const [ name, setName ] = useState() \r\n    const [ showForm, setShowForm ] = useState(false)\r\n\r\n    const createBoard = (ev) => {\r\n        props.onChange(name)\r\n        setName(\"\")\r\n        showForm(false)\r\n        ev.preventDefault();\r\n    }\r\n\r\n    const onNameChange = (ev) => {\r\n        setName(ev.target.value)\r\n    }\r\n\r\n    const formInput = (\r\n        <form  onSubmit={createBoard}>\r\n            <BoardName type=\"text\" value={name} onChange={onNameChange} />\r\n        </form>\r\n    )\r\n\r\n    return (\r\n           <Container>\r\n                { !showForm && (<Button  onClick={() => {setShowForm(true)}}>Create new board</Button>)}\r\n                {showForm && formInput}\r\n           </Container>\r\n    )\r\n}\r\nexport default CreateBoard","import React, { useEffect } from \"react\";\r\nimport { Droppable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport Bee from \"./bee\";\r\nimport styled from \"styled-components\";\r\nimport { useState } from \"react\";\r\n\r\nconst Container = styled.div``;\r\n\r\nconst Board = ({ data }) => {\r\n  const [update, setUpdate] = useState(false);\r\n\r\n  const saveBoard = (id, value) => {\r\n    let newData = {\r\n      ...data,\r\n      boards: {\r\n        ...data.boards,\r\n        [id]: {\r\n          ...data.boards[id],\r\n          content: value,\r\n        },\r\n      },\r\n    };\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData));\r\n    setUpdate((prev) => !prev);\r\n  };\r\n\r\n  const deleteBoard = (id) => {\r\n    let newData = { ...data };\r\n    let index = newData.boardsOrder.indexOf(id);\r\n    newData.boardsOrder.splice(index, 1);\r\n    delete newData.boards[id];\r\n    localStorage.setItem(\"bee\", JSON.stringify(newData));\r\n    setUpdate((prev) => !prev);\r\n  };\r\n\r\n const boardsList = data.boardsOrder.map((boardId, index) => {\r\n    const board = data.boards[boardId];\r\n    \r\n    return (\r\n        <Bee\r\n            key={board.id + board.title}\r\n            initialData={board.content}\r\n            board={board}\r\n            index={index}\r\n            deleteBoard={deleteBoard}\r\n            saveBoard={saveBoard}\r\n        />\r\n    )\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n     {boardsList}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n\r\n","import './App.css';\r\nimport initialData from \"./initialData\";\r\nimport React from \"react\"\r\nimport {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\"\r\n\r\nimport CreateBoard from './components/createBoard';\r\nimport Board from \"./board/boardsType/board\"\r\nimport Grid from \"./grid/grid\"\r\n\r\n\r\nconst Header = styled.div`\r\n  margin: 8px;\r\n  height: 100px;\r\n  background-color: gray;\r\n`\r\nconst Container = styled.div`\r\n  margin: 10px\r\n`\r\n\r\nconst getLstorage = () => {\r\n    if(localStorage.getItem(\"bee\")) {\r\n        return JSON.parse(localStorage.getItem(\"bee\"))\r\n    }else {\r\n        localStorage.setItem(\"bee\", JSON.stringify(initialData))\r\n        return JSON.parse(localStorage.getItem(\"bee\"))\r\n    }\r\n}\r\n\r\nfunction App() {\r\n\r\n    const [boards, setBoards] = useState(getLstorage())\r\n\r\n    const updateBoard = (boardName) => {\r\n        let data = boards\r\n        let newBoardOrder = data.boardsOrder\r\n        newBoardOrder.push(boardName)\r\n        let newData = {\r\n            ...data,\r\n            boardsOrder: newBoardOrder,\r\n            boards: {\r\n                ...data.boards,\r\n                [boardName]: {\r\n                    type: 'kanban',\r\n                    id: boardName,\r\n                    title: boardName,\r\n                    content: {\r\n                        tasks: {},\r\n                        columns: {},\r\n                        columnOrder: [],\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        setBoards(newData)\r\n    }\r\n\r\n    useEffect( () => {\r\n       localStorage.setItem(\"bee\", JSON.stringify(boards))\r\n    }, [boards])\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header>Bee</Header>\r\n            <Container>\r\n                { <Grid data={boards} items={boards.boardsOrder.length}></Grid>}\r\n                <CreateBoard onChange={updateBoard}></CreateBoard>\r\n            </Container>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './../node_modules/react-grid-layout/css/styles.css'\r\nimport './../node_modules/react-resizable/css/styles.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}